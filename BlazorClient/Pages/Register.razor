@page "/registration"
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using Models
@inject User User
@using System.Text.Json
@using System.Text.RegularExpressions

<section class="bg-green">
    <div class="mask d-flex align-items-center gradient-custom-3 vw-100 vh-100 main-content scale-90">
        <div class="container">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <a href="/" class="btn btn-link text-decoration-none" style="margin-top: 20%;">
                    <i class="bi bi-arrow-left"></i> Вернуться на главную
                </a>
            </div>
            <div class="row justify-content-center">
                <div class="col-12 col-md-8 col-lg-6 col-xl-5">
                    <div class="card border shadow p-3 mb-3 bg-white">
                        <div class="card-body">
                            <h2 class="text-center mb-3">Создать аккаунт</h2>
                            <form>
                                <div class="form-group mb-3 text-start">
                                    <label for="username"><b>Логин</b></label>
                                    <input type="text" class="form-control" id="username" placeholder="Введите логин" @bind="UserName" @oninput="OnFieldChanged">
                                    @if (ShowUsernameMessage)
                                    {
                                        <p class="text-danger">Логин должен содержать не менее 5 символов и хотя бы 3 буквы</p>
                                    }
                                    @if (ShowUsernameExistsMessage)
                                    {
                                        <p class="text-danger">Логин уже занят</p>
                                    }
                                    <div class="alert alert-info mt-2" role="alert">
                                        Логин должен содержать не менее 5 символов и хотя бы 3 буквы.
                                    </div>
                                </div>
                                <div class="form-group mb-3 text-start">
                                    <label for="firstName"><b>Имя</b></label>
                                    <input type="text" class="form-control" id="firstName" placeholder="Иван" @bind="FirstName" @oninput="OnFieldChanged">
                                    @if (ShowFirstNameMessage)
                                    {
                                        <p class="text-danger">Имя не введено или не соответствует формату</p>
                                    }
                                </div>
                                <div class="form-group mb-3 text-start">
                                    <label for="lastName"><b>Фамилия</b></label>
                                    <input type="text" class="form-control" id="lastName" placeholder="Иванов" @bind="LastName" @oninput="OnFieldChanged">
                                    @if (ShowLastNameMessage)
                                    {
                                        <p class="text-danger">Фамилия не введена или не соответствует формату</p>
                                    }
                                </div>
                                <div class="form-group mb-3 text-start">
                                    <label for="email"><b>Почта</b></label>
                                    <input type="email" class="form-control" id="email" placeholder="example@mail.com" @bind="Email" @oninput="OnFieldChanged">
                                    @if (ShowEmailMessage)
                                    {
                                        <p class="text-danger">Почта не введена или не соответствует требованиям</p>
                                    }
                                    @if (ShowEmailExistsMessage)
                                    {
                                        <p class="text-danger">Почта уже занята</p>
                                    }
                                </div>
                                <div class="form-group mb-3 text-start">
                                    <label for="password"><b>Пароль</b></label>
                                    <input type="@(ShowPassword ? "text" : "password")" class="form-control" id="password" placeholder="Введите пароль" @bind="Password" @oninput="OnFieldChanged">
                                </div>
                                <div class="form-group mb-3 text-start">
                                    <label for="confirmPassword"><b>Подтверждение пароля</b></label>
                                    <input type="@(ShowPassword ? "text" : "password")" class="form-control" id="confirmPassword" placeholder="Подтвердите пароль" @bind="ConfirmPassword" @oninput="OnFieldChanged">
                                </div>
                                <div class="form-check mb-3 text-start">
                                    <input type="checkbox" class="form-check-input" @bind="ShowPassword" id="showPassword">
                                    <label class="form-check-label" for="showPassword">Показать пароль</label>
                                </div>
                                @if (ShowPasswordMessage)
                                {
                                    <p class="text-danger">Пароль не введен или не соответствует требованиям</p>
                                }
                                @if (ShowConfirmPasswordMessage)
                                {
                                    <p class="text-danger">Пароли не совпадают</p>
                                }
                                <div class="alert alert-info mt-2" role="alert">
                                    Пароль должен быть минимум 8 символов, содержать 2 буквы разного регистра и хотя бы одну цифру.
                                </div>
                                <div class="form-group form-check mb-3 text-start">
                                    <input type="checkbox" class="form-check-input" id="acceptTerms" @bind="AcceptTerms">
                                    <label class="form-check-label" for="acceptTerms"><b>Принять условия</b></label>
                                    @if (ShowAcceptTermsMessage)
                                    {
                                        <p class="text-danger">Вы должны принять условия</p>
                                    }
                                </div>
                                <div class="w-100 d-flex justify-content-center">
                                    <button type="button" class="btn btn-primary mt-auto" @onclick="Registered" disabled="@IsButtonDisabled">Зарегистрироваться</button>
                                </div>
                                <p class="text-center text-muted mt-2 mb-0">
                                    Уже есть аккаунт? <a href="/login" class="fw-bold text-body"><u>Вход</u></a>
                                </p>
                            </form>
                            @if (!string.IsNullOrEmpty(ErrorMessage))
                            {
                                <div class="alert alert-danger mt-3" role="alert">
                                    @ErrorMessage
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(SuccessMessage))
                            {
                                <div class="alert alert-success mt-3" role="alert">
                                    @SuccessMessage
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private string UserName = null!;
    private string FirstName = null!;
    private string LastName = null!;
    private string Email = null!;
    private string Password = null!;
    private string ConfirmPassword = null!;
    private bool AcceptTerms = false;
    private bool IsButtonDisabled = false;
    private string ErrorMessage = string.Empty;
    private string SuccessMessage = string.Empty;
    private bool ShowUsernameMessage = false;
    private bool ShowEmailMessage = false;
    private bool ShowPasswordMessage = false;
    private bool ShowConfirmPasswordMessage = false;
    private bool ShowFirstNameMessage = false;
    private bool ShowLastNameMessage = false;
    private bool ShowAcceptTermsMessage = false;
    private bool ShowUsernameExistsMessage = false;
    private bool ShowEmailExistsMessage = false;
    private bool ShowPassword = false;

    private void OnFieldChanged()
    {
        ShowUsernameMessage = false;
        ShowEmailMessage = false;
        ShowPasswordMessage = false;
        ShowConfirmPasswordMessage = false;
        ShowFirstNameMessage = false;
        ShowLastNameMessage = false;
        ShowAcceptTermsMessage = false;
        ShowUsernameExistsMessage = false;
        ShowEmailExistsMessage = false;
        ErrorMessage = string.Empty;
    }
    private async Task Registered()
    {
        IsButtonDisabled = true;
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;
        try
        {
            ShowUsernameMessage = !IsValidUsername(UserName);
            ShowEmailMessage = !IsValidEmail(Email);
            ShowPasswordMessage = !IsValidPassword(Password);
            ShowConfirmPasswordMessage = Password != ConfirmPassword;
            ShowFirstNameMessage = string.IsNullOrEmpty(FirstName) || FormatName(FirstName) == null;
            ShowLastNameMessage = string.IsNullOrEmpty(LastName) || FormatName(LastName) == null;
            ShowAcceptTermsMessage = !AcceptTerms;
            if (ShowUsernameMessage || ShowEmailMessage || ShowPasswordMessage || ShowConfirmPasswordMessage || ShowFirstNameMessage || ShowLastNameMessage || ShowAcceptTermsMessage)
            {
                return;
            }
            ShowUsernameExistsMessage = await CheckUsernameExists(UserName);
            if (ShowUsernameExistsMessage)
            {
                return;
            }
            ShowEmailExistsMessage = await CheckEmailExists(Email);
            if (ShowEmailExistsMessage)
            {
                return;
            }
            HttpClient client = new HttpClient
                {
                    BaseAddress = new Uri("https://oxygenmarketapi.onrender.com/")
                };
            RegisterRequest registerRequest = new RegisterRequest
                {
                    UserName = UserName,
                    FirstName = FirstName,
                    LastName = LastName,
                    Email = Email,
                    Password = Password,
                    ConfirmPassword = ConfirmPassword,
                    AcceptTerms = AcceptTerms
                };

            HttpResponseMessage response = await client.PostAsJsonAsync<RegisterRequest>("Accounts/register", registerRequest);
            if (response.IsSuccessStatusCode)
            {
                SuccessMessage = "Регистрация успешна. Пожалуйста, перейдите по ссылке, отправленной на вашу почту, чтобы подтвердить email.";
                ClearFields();
                Navigation.NavigateTo("/verify-email");
            }
            else
            {
                ErrorMessage = "Ошибка регистрации. Пожалуйста, попробуйте снова.";
            }
        }
        finally
        {
            IsButtonDisabled = false;
        }
    }
    private void ClearFields()
    {
        UserName = string.Empty;
        FirstName = string.Empty;
        LastName = string.Empty;
        Email = string.Empty;
        Password = string.Empty;
        ConfirmPassword = string.Empty;
        AcceptTerms = false;
    }
    private bool IsValidUsername(string username)
    {
        if (string.IsNullOrWhiteSpace(username) || username.Length < 5)
            return false;
        return username.Count(char.IsLetter) >= 3;
    }
    private bool IsValidEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return false;
        string pattern = @"^[a-zA-Z0-9\.]+@[a-zA-Z]+\.[a-zA-Z]{2,3}$";
        return Regex.IsMatch(email, pattern);
    }
    private bool IsValidPassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
            return false;
        return password.Length >= 8 &&
               password.Any(char.IsLower) &&
               password.Any(char.IsUpper) &&
               password.Any(char.IsDigit);
    }
    private string FormatName(string name)
    {
        name = Regex.Replace(name, @"[^а-яА-ЯёЁa-zA-Z\-]", "");
        if (string.IsNullOrEmpty(name))
        {
            return null;
        }
        else
        {
            if (Regex.IsMatch(name, @"^[а-яА-ЯёЁa-zA-Z]+(-[а-яА-ЯёЁa-zA-Z]+)?$"))
            {
                name = name.ToLower();
                string[] words = name.Split('-');
                for (int i = 0; i < words.Length; i++)
                {
                    if (words[i].Length > 0)
                    {
                        words[i] = char.ToUpper(words[i][0]) + words[i].Substring(1);
                    }
                }
                return string.Join("-", words);
            }
            else
            {
                return null;
            }
        }
    }
    private async Task<bool> CheckUsernameExists(string username)
    {
        HttpClient client = new HttpClient
            {
                BaseAddress = new Uri("https://oxygenmarketapi.onrender.com/")
                
            };
        var response = await client.GetAsync($"Accounts/checkusername?username={username}");
        return response.IsSuccessStatusCode && await response.Content.ReadFromJsonAsync<bool>();
    }
    private async Task<bool> CheckEmailExists(string email)
    {
        HttpClient client = new HttpClient
            {
                BaseAddress = new Uri("https://oxygenmarketapi.onrender.com/")
                
            };
        var response = await client.GetAsync($"Accounts/checkemail?email={email}");
        return response.IsSuccessStatusCode && await response.Content.ReadFromJsonAsync<bool>();
    }
}