@page "/chatbot"
@using System.Net.Http
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime

<h3>Чат с преподавателем</h3>

<div class="chat-container">
    <div class="teacher-selection">
        <label>Выберите преподавателя:</label>
        <select @bind="selectedTeacher">
            <option value="">Автоматический выбор</option>
            <option value="Шамина">Шамина</option>
            <option value="Смирнов">Смирнов</option>
            <option value="Михайлов">Михайлов</option>
            <option value="Логинов">Логинов</option>
            <option value="Самарина">Самарина</option>
            <option value="Ларионов">Ларионов</option>
        </select>
    </div>
    <ul class="chat-history">
        @foreach (var message in chatHistory)
        {
            <li>@message</li>
        }
    </ul>
    <div class="input-container">
        <input @bind="userInput" @bind:event="oninput" placeholder="Введите сообщение..." />
        <button @onclick="SendMessage" disabled="@(isSending)">Отправить</button>
    </div>
</div>

@code {
    private List<string> chatHistory = new List<string>();
    private string userInput = string.Empty;
    private string? selectedTeacher = string.Empty;
    private bool isSending = false;
    private string currentResponse = "";

    protected override async Task OnInitializedAsync()
    {
        chatHistory.Add("Чат-бот: Здравствуйте! Я ваш виртуальный преподаватель. Выберите, кем я буду, или задайте вопрос, и я сам пойму.");
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput))
            return;

        isSending = true;
        chatHistory.Add($"Вы: {userInput}");
        var userMessage = userInput;
        userInput = string.Empty;
        currentResponse = "";
        StateHasChanged();

        try
        {
            var request = new
            {
                Message = userMessage,
                UserId = "anonymous",
                Teacher = selectedTeacher
            };

            await JSRuntime.InvokeVoidAsync("startEventSource", "https://localhost:7258/api/chatbot/send", request, DotNetObjectReference.Create(this));
        }
        catch (Exception ex)
        {
            chatHistory.Add($"Чат-бот: Ошибка: {ex.Message}");
        }
        finally
        {
            isSending = false;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public void OnMessageReceived(string message)
    {
        currentResponse += message;
        if (chatHistory.LastOrDefault()?.StartsWith("Чат-бот: ") == true)
        {
            chatHistory[chatHistory.Count - 1] = $"Чат-бот: {currentResponse}";
        }
        else
        {
            chatHistory.Add($"Чат-бот: {currentResponse}");
        }
        StateHasChanged();
    }

    [JSInvokable]
    public void OnStreamClosed()
    {
        isSending = false;
        StateHasChanged();
    }
}

<style>
    .chat-container {
        max-width: 600px;
        margin: 20px auto;
    }

    .teacher-selection {
        margin-bottom: 10px;
    }

    .chat-history {
        list-style-type: none;
        padding: 0;
        max-height: 400px;
        overflow-y: auto;
        border: 1px solid #ccc;
        padding: 10px;
    }

    .input-container {
        display: flex;
        margin-top: 10px;
    }

    input[type="text"] {
        flex-grow: 1;
        padding: 5px;
    }

    button {
        margin-left: 10px;
        padding: 5px 15px;
    }
</style>

<script>
    window.startEventSource = async (url, requestData, dotnetObj) => {
        const response = await fetch(url, {
            method: "POST",
            body: JSON.stringify(requestData),
            headers: { "Content-Type": "application/json" }
        });

        const reader = response.body.getReader();
        const decoder = new TextDecoder();

        while (true) {
            const { done, value } = await reader.read();
            if (done) {
                dotnetObj.invokeMethodAsync('OnStreamClosed');
                break;
            }
            const chunk = decoder.decode(value);
            const lines = chunk.split('\n');
            for (const line of lines) {
                if (line.startsWith('data: ')) {
                    const message = line.substring(6);
                    dotnetObj.invokeMethodAsync('OnMessageReceived', message);
                }
            }
        }
    };
</script>