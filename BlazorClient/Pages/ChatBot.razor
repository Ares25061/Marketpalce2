@page "/chatbot"
@using System.Net.Http
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject UserInfo user

@if (string.IsNullOrEmpty(user.JwtToken))
{
    <div class="chat-page">
        <div class="container chat-container">
            <div class="alert alert-warning text-center">
                <h4>Пожалуйста, авторизуйтесь</h4>
                <p>Для использования чат-бота необходимо войти в аккаунт.</p>
                <a href="/login" class="btn btn-primary">Войти</a>
            </div>
        </div>
    </div>
}
else
{
    <nav class="py-3 navbar navbar-expand-lg fixed-top auto-hiding-navbar">
        <div class="container">
            <img src="https://github.com/Ares25061/Marketpalce2/blob/main/BlazorClient/wwwroot/images/%D0%B8%D0%B7%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5_2024-11-18_133151923.png?raw=true"
                 style="max-width:5%; max-height:5%">
            <a class="navbar-brand" href="/">Кислород</a>

            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
                    aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="#">Главная</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/">Каталог</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/">Акции</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/">Доставка</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="/chatbot">Чат-Бот</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/profile">Личный кабинет</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="chat-page">
        <div class="container chat-container">
            <h3>Чат с преподавателем</h3>
            <div class="teacher-selection">
                <label>Выберите преподавателя:</label>
                <select @bind="selectedTeacher">
                    <option value="">Автоматический выбор</option>
                    <option value="Шамина">Шамина</option>
                    <option value="Смирнов">Смирнов</option>
                    <option value="Михайлов">Михайлов</option>
                    <option value="Логинов">Логинов</option>
                    <option value="Самарина">Самарина</option>
                    <option value="Ларионов">Ларионов</option>
                </select>
            </div>
            <ul class="chat-history">
                @foreach (var message in chatHistory)
                {
                    <li class="@(message.StartsWith("Вы: ") ? "user-message" : "bot-message")">@message</li>
                }
            </ul>
            <div class="input-container">
                <input @bind="userInput" @bind:event="oninput" placeholder="Введите сообщение..." />
                <button @onclick="SendMessage" disabled="@(isSending)">Отправить</button>
                <button @onclick="ClearChatHistory" class="btn-clear">Очистить историю</button>
            </div>
        </div>
    </div>
}

@code {
    private List<string> chatHistory = new List<string>();
    private string userInput = string.Empty;
    private string? selectedTeacher = string.Empty;
    private bool isSending = false;
    private string currentResponse = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadUserInfo();
        if (string.IsNullOrEmpty(user.JwtToken))
        {
            Navigation.NavigateTo("/login");
            return;
        }
        await LoadChatHistory();
    }

    private async Task LoadUserInfo()
    {
        try
        {
            var userJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "UserInfo");
            if (!string.IsNullOrEmpty(userJson))
            {
                user = JsonSerializer.Deserialize<UserInfo>(userJson);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка при получении данных пользователя: " + ex.Message);
        }
    }

    private async Task LoadChatHistory()
    {
        try
        {
            var historyJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "ChatHistory");
            if (!string.IsNullOrEmpty(historyJson))
            {
                chatHistory = JsonSerializer.Deserialize<List<string>>(historyJson);
            }
            else
            {
                chatHistory.Add("Чат-бот: Здравствуйте! Я ваш виртуальный преподаватель. Выберите, кем я буду, или задайте вопрос, и я сам пойму.");
                await SaveChatHistory();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка при загрузке истории чата: " + ex.Message);
            chatHistory.Add("Чат-бот: Ошибка при загрузке истории: " + ex.Message);
            await SaveChatHistory();
        }
    }

    private async Task SaveChatHistory()
    {
        try
        {
            var historyJson = JsonSerializer.Serialize(chatHistory);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "ChatHistory", historyJson);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка при сохранении истории чата: " + ex.Message);
        }
    }

    private async Task ClearChatHistory()
    {
        chatHistory.Clear();
        chatHistory.Add("Чат-бот: История очищена. Здравствуйте! Я ваш виртуальный преподаватель. Выберите, кем я буду, или задайте вопрос, и я сам пойму.");
        await SaveChatHistory();
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput))
            return;

        isSending = true;
        chatHistory.Add($"Вы: {userInput}");
        var userMessage = userInput;
        userInput = string.Empty;
        currentResponse = "";
        await SaveChatHistory();
        StateHasChanged();

        try
        {
            var request = new
            {
                Message = userMessage,
                UserId = user.UserName ?? "anonymous",
                Teacher = selectedTeacher
            };

            await JSRuntime.InvokeVoidAsync("startEventSource", "https://oxygenmarketapi.onrender.com/api/chatbot/send", request, DotNetObjectReference.Create(this));
        }
        catch (Exception ex)
        {
            chatHistory.Add($"Чат-бот: Ошибка: {ex.Message}");
            await SaveChatHistory();
        }
    }

    [JSInvokable]
    public async void OnMessageReceived(string message)
    {
        currentResponse += message;
        if (chatHistory.LastOrDefault()?.StartsWith("Чат-бот: ") == true)
        {
            chatHistory[chatHistory.Count - 1] = $"Чат-бот: {currentResponse}";
        }
        else
        {
            chatHistory.Add($"Чат-бот: {currentResponse}");
        }
        await SaveChatHistory();
        StateHasChanged();
    }

    [JSInvokable]
    public void OnStreamClosed()
    {
        isSending = false;
        StateHasChanged();
    }
}

<style>
    body {
        background: #0d1a26;
        color: #e0e0e0;
        font-family: 'Arial', sans-serif;
    }

    .navbar {
        background: #1a2b3c;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
    }

    .navbar-brand, .nav-link {
        color: #e0e0e0 !important;
        transition: color 0.3s;
    }

        .nav-link:hover, .nav-link.active {
            color: #00d4ff !important;
        }

    .chat-page {
        padding-top: 100px;
        min-height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .chat-container {
        max-width: 800px;
        background: #1e2a38;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    }

    h3 {
        color: #00d4ff;
        text-align: center;
        margin-bottom: 20px;
    }

    .teacher-selection {
        margin-bottom: 20px;
        text-align: center;
    }

        .teacher-selection label {
            color: #b0b0b0;
            margin-right: 10px;
        }

        .teacher-selection select {
            background: #2c3e50;
            color: #e0e0e0;
            border: 1px solid #3a506b;
            border-radius: 5px;
            padding: 5px 10px;
            font-size: 14px;
        }

    .chat-history {
        list-style-type: none;
        padding: 0;
        max-height: 500px;
        overflow-y: auto;
        background: #263544;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 20px;
    }

        .chat-history li {
            margin: 10px 0;
            padding: 10px;
            border-radius: 5px;
            word-wrap: break-word;
        }

    .user-message {
        background: #3a506b;
        text-align: right;
        color: #e0e0e0;
    }

    .bot-message {
        background: #2c3e50;
        text-align: left;
        color: #e0e0e0;
    }

    .input-container {
        display: flex;
        gap: 10px;
    }

    input[type="text"] {
        flex-grow: 1;
        background: #2c3e50;
        color: #e0e0e0;
        border: 1px solid #3a506b;
        border-radius: 5px;
        padding: 10px;
        font-size: 14px;
    }

        input[type="text"]::placeholder {
            color: #b0b0b0;
        }

    button {
        background: #00d4ff;
        color: #1a2b3c;
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        font-weight: bold;
        transition: background 0.3s;
    }

        button:hover:not(:disabled) {
            background: #00b8d4;
        }

        button:disabled {
            background: #3a506b;
            cursor: not-allowed;
        }

    .btn-clear {
        background: #ff4d4d;
        color: #ffffff;
    }

        .btn-clear:hover:not(:disabled) {
            background: #e63939;
        }
</style>

<script>
    window.startEventSource = async (url, requestData, dotnetObj) => {
        const response = await fetch(url, {
            method: "POST",
            body: JSON.stringify(requestData),
            headers: { "Content-Type": "application/json" }
        });

        const reader = response.body.getReader();
        const decoder = new TextDecoder();

        while (true) {
            const { done, value } = await reader.read();
            if (done) {
                dotnetObj.invokeMethodAsync('OnStreamClosed');
                break;
            }
            const chunk = decoder.decode(value);
            const lines = chunk.split('\n');
            for (lines of lines) {
                if (line.startsWith('data: ')) {
                    const message = line.substring(6);
                    dotnetObj.invokeMethodAsync('OnMessageReceived', message);
                }
            }
        }
    };
</script>