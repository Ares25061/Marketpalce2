@page "/reset-password"
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using Models
@using System.Text.Json

<section class="bg-green">
    <div class="mask d-flex align-items-center gradient-custom-3 vh-100 main-content">
        <div class="container" style="width: 3000px">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <a href="/" class="btn btn-link text-decoration-none">
                    <i class="bi bi-arrow-left"></i> Вернуться на главную
                </a>
            </div>
            <div class="row justify-content-center">
                <div class="col-12 col-md-8 col-lg-6 col-xl-5">
                    <div class="card border shadow p-3 mb-5 bg-white" style="border-radius: 15px;">
                        <div class="card-body">
                            <h2 class="text-center mb-3">Сброс пароля</h2>
                            @if (isLoading)
                            {
                                <div class="text-center">
                                    <p>Загрузка...</p>
                                </div>
                            }
                            else if (showForm)
                            {
                                <p class="text-center text-muted mb-3">Введите новый пароль.</p>
                                <form>
                                    <div class="form-group mb-3 text-start">
                                        <label for="password"><b>Новый пароль</b></label>
                                        <input type="@(ShowPassword ? "text" : "password")" class="form-control" id="password" placeholder="Введите новый пароль" @bind="Password" @oninput="OnFieldChanged" />
                                    </div>
                                    <div class="form-group mb-3 text-start">
                                        <label for="confirmPassword"><b>Подтверждение пароля</b></label>
                                        <input type="@(ShowPassword ? "text" : "password")" class="form-control" id="confirmPassword" placeholder="Подтвердите пароль" @bind="ConfirmPassword" @oninput="OnFieldChanged" />
                                    </div>
                                    <div class="form-check mb-3 text-start">
                                        <input type="checkbox" class="form-check-input" @bind="ShowPassword" id="showPassword" />
                                        <label class="form-check-label" for="showPassword">Показать пароль</label>
                                    </div>
                                    @if (ShowPasswordMessage)
                                    {
                                        <p class="text-danger">Пароль не введен или не соответствует требованиям</p>
                                    }
                                    @if (ShowConfirmPasswordMessage)
                                    {
                                        <p class="text-danger">Пароли не совпадают</p>
                                    }
                                    <div class="alert alert-info mt-2" role="alert">
                                        Пароль должен быть минимум 8 символов, содержать 2 буквы разного регистра и хотя бы одну цифру.
                                    </div>
                                    <div class="w-100 d-flex justify-content-center">
                                        <button type="button" class="btn btn-primary mt-auto btn-custom" @onclick="ResetPassword1" disabled="@IsButtonDisabled">Сбросить пароль</button>
                                    </div>
                                </form>
                            }
                            @if (!string.IsNullOrEmpty(ErrorMessage))
                            {
                                <div class="alert alert-danger mt-3" role="alert">
                                    @ErrorMessage
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(SuccessMessage))
                            {
                                <div class="alert alert-success mt-3" role="alert">
                                    @SuccessMessage
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private string Token = string.Empty;
    private string Password = string.Empty;
    private string ConfirmPassword = string.Empty;
    private bool ShowPassword = false;
    private bool IsButtonDisabled = false;
    private string ErrorMessage = string.Empty;
    private string SuccessMessage = string.Empty;
    private bool isLoading = true;
    private bool showForm = true;
    private bool ShowPasswordMessage = false;
    private bool ShowConfirmPasswordMessage = false;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var tokenFromUrl = query["token"];

        if (!string.IsNullOrEmpty(tokenFromUrl))
        {
            Token = tokenFromUrl;
            showForm = true; 
        }
        else
        {
            ErrorMessage = "Токен не найден в URL. Пожалуйста, используйте ссылку из письма.";
            showForm = false;
        }
        isLoading = false;
    }

    private void OnFieldChanged()
    {
        ShowPasswordMessage = false;
        ShowConfirmPasswordMessage = false;
        ErrorMessage = string.Empty;
    }

    private async Task ResetPassword1()
    {
        IsButtonDisabled = true;
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;

        try
        {
            ShowPasswordMessage = !IsValidPassword(Password);
            ShowConfirmPasswordMessage = Password != ConfirmPassword;

            if (ShowPasswordMessage || ShowConfirmPasswordMessage)
            {
                return;
            }

            HttpClient client = new HttpClient
                {
                    BaseAddress = new Uri("https://oxygenmarketapi.onrender.com/")
                };

            var request = new ResetPasswordRequest
                {
                    Token = Token,
                    Password = Password,
                    ConfirmPassword = ConfirmPassword
                };

            var response = await client.PostAsJsonAsync("Accounts/reset-password", request);

            if (response.IsSuccessStatusCode)
            {
                SuccessMessage = "Пароль успешно сброшен! Теперь вы можете войти.";
                showForm = false;
                await Task.Delay(2000);
                Navigation.NavigateTo("/login");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                var errorObj = JsonSerializer.Deserialize<Dictionary<string, string>>(errorContent);
                ErrorMessage = errorObj.ContainsKey("message") ? errorObj["message"] : "Ошибка сброса пароля. Попробуйте снова.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Произошла ошибка: {ex.Message}";
        }
        finally
        {
            IsButtonDisabled = false;
        }
    }

    private bool IsValidPassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
            return false;
        return password.Length >= 8 &&
               password.Any(char.IsLower) &&
               password.Any(char.IsUpper) &&
               password.Any(char.IsDigit);
    }
}

<style>
    .btn-custom {
        transition: background-color 0.3s ease, transform 0.3s ease;
    }

        .btn-custom:active {
            background-color: #4a3f7c !important;
            transform: scale(0.95);
        }
</style>